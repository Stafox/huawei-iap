<?php

namespace Huawei\IAP\Response;

class SubscriptionResponse extends ValidationResponse
{
    /**
     * @param array $raw
     */
    protected function parseDataModel(array $raw)
    {
        if (isset($raw['inappPurchaseData'])) {
            $this->dataModel = \json_decode($raw['inappPurchaseData'], true);
        }
    }

    /**
     * Subscription status
     *
     * true:  A user has been charged for a product,
     *        the product has not expired, no refund has been made,
     *        and the product is in a grace period. In this case,
     *        you can provide services for the user.
     * false: The purchase of a product is not finished,
     *        the product has expired, or a refund has been made
     *        for the product after its purchase.
     *
     * @note If a user has canceled a subscription, the subIsvalid parameter value
     *       is still true until the subscription expires.
     *
     * @return bool|null
     */
    public function isSubValid(): ?bool
    {
        return $this->dataModel['subIsvalid'] ?? null;
    }

    /**
     * Order ID generated by the Huawei IAP server during fee deduction
     * for the previous renewal. The parameter value is the same
     * as that of orderId when a subscription is purchased for the first time.
     *
     * @note Returned only in the subscription scenario.
     *
     * @return string
     */
    public function getLastOrderId(): string
    {
        return $this->dataModel['lastOrderId'];
    }

    /**
     * Timestamp of the first fee deduction time (in UTC),
     * which is the number of milliseconds from 00:00:00 on January 1, 1970
     * to the first successful fee deduction time.
     *
     * @note Returned only in the subscription scenario.
     * @return int|null
     */
    public function getOriPurchaseTime(): ?int
    {
        return $this->dataModel['oriPurchaseTime'] ?? null;
    }

    /**
     * Subscription ID.
     *
     * @note This parameter uniquely identifies the mapping
     *       between a product and a user. It does not change
     *       when the subscription is renewed.
     *
     * @return string|null
     */
    public function getSubscriptionId(): ?string
    {
        return $this->dataModel['subscriptionId'] ?? null;
    }

    /**
     * Original subscription ID.
     *
     * If a value exists, the current subscription is switched from another one.
     * The value can be associated with the information about the original subscription.
     *
     * @return string|null
     */
    public function getSubscriptionOriId(): ?string
    {
        return $this->dataModel['subscriptionOriId'] ?? null;
    }

    /**
     * Days of a paid subscription, excluding the free trial period and promotion period.
     *
     * @return int|null
     */
    public function getDaysLasted(): ?int
    {
        return $this->dataModel['daysLasted'] ?? null;
    }

    /**
     * Number of successful standard renewal periods
     * (that is, renewal periods without promotion).
     *
     * If the value is 0 or does not exist, no renewal has been performed successfully.
     *
     * @return int|null
     */
    public function getNumOfPeriods(): ?int
    {
        return $this->dataModel['numOfPeriods'] ?? null;
    }

    /**
     * Number of successful renewal periods with promotion.
     *
     * @return int|null
     */
    public function getNumOfDiscount(): ?int
    {
        return $this->dataModel['numOfDiscount'] ?? null;
    }

    /**
     * Timestamp when a subscription expires (in UTC), in milliseconds.
     *
     * For an automatic renewal receipt where the fee has been deducted successfully,
     * this time indicates the renewal date or expiration date.
     * If the value is a past time for the latest receipt of a subscription,
     * the subscription has expired.
     *
     * @return int|null
     */
    public function getExpirationDate(): ?int
    {
        return $this->dataModel['expirationDate'] ?? null;
    }

    /**
     * Reason why a subscription expires. The options are as follows:
     * 1: canceled by a user
     * 2: product being unavailable
     * 3: abnormal user signing information
     * 4: billing error
     * 5: price increase disagreed with by a user
     * 6: unknown error
     *
     * If there are multiple exceptions, a smaller number indicates
     * a higher priority (1 > 2 > 3...).
     *
     * @return int|null
     */
    public function getExpirationIntent(): ?int
    {
        return $this->dataModel['expirationIntent'] ?? null;
    }

    /**
     * Indicates whether the system still tries to renew an expired subscription.
     *
     * The options are as follows:
     * 0: no
     * 1: yes
     *
     * @return int|null
     */
    public function getRetryFlag(): ?int
    {
        return $this->dataModel['retryFlag'] ?? null;
    }

    /**
     * Indicates whether a subscription is in the renewal period with promotion.
     *
     * The options are as follows:
     * 1: yes
     * 0: no
     *
     * @return int|null
     */
    public function getIntroductoryFlag(): ?int
    {
        return $this->dataModel['introductoryFlag'] ?? null;
    }

    /**
     * Indicates whether a subscription is in the free trial period.
     *
     * The options are as follows:
     * 1: yes
     * 0: no
     *
     * @return int|null
     */
    public function getTrialFlag(): ?int
    {
        return $this->dataModel['trialFlag'] ?? null;
    }

    /**
     * Timestamp when a subscription is canceled (in UTC), in milliseconds.
     * When a refund occurs, the service is unavailable immediately.
     *
     * A value is returned when a user:
     * (1) makes a complaint and revokes a subscription
     *     through the customer service personnel;
     * (2) performs subscription upgrade or crossgrade
     *     that immediately takes effect and revokes
     *     the previous receipt of the original subscription.
     *
     * @note If a receipt is revoked, it is deemed that the purchase is not complete.
     * @return int|null
     */
    public function getCancelTime(): ?int
    {
        return $this->dataModel['cancelTime'] ?? null;
    }

    /**
     * Cause of subscription cancellation.
     *
     * The options are as follows:
     * 2: A user performs subscription upgrade or crossgrade.
     * 1: A user encounters a problem within the app and cancels the subscription.
     * 0: other causes. For example, a user mistakenly purchases a subscription
     *    and has to cancel it.
     *
     * @note If this parameter is left empty but the cancelTime parameter has a value, the cancellation is caused by an operation such as upgrade.
     *
     * @return int|null
     */
    public function getCancelReason(): ?int
    {
        return $this->dataModel['cancelReason'] ?? null;
    }

    /**
     * App information. This parameter is reserved.
     *
     * @return string|null
     */
    public function getAppInfo(): ?string
    {
        return $this->dataModel['appInfo'] ?? null;
    }

    /**
     * Indicates whether a user has disabled the subscription notification function.
     *
     * The options are as follows:
     * 1: yes
     * 0: no
     *
     * If the user disables the subscription notification function,
     * no subscription notification will be sent to this user.
     *
     * @note A value is returned only when subscription relationships are queried.
     *
     * @return int|null
     */
    public function getNotifyClosed(): ?int
    {
        return $this->dataModel['notifyClosed'] ?? null;
    }

    /**
     * Renewal status.
     *
     * The options are as follows:
     * 1: The subscription renewal is normal.
     * 0: The user has canceled subscription renewal.
     *
     * For auto-renewable subscriptions, this parameter is valid
     * for both valid and expired subscriptions.
     *
     * However, it does not represent users' subscription status.
     * Generally, when the value is 0, the app can provide
     * other subscription options for the user, for example,
     * recommending another subscription with a lower level in the same group.
     * The value 0 indicates that a user proactively cancels the subscription.
     *
     * @return int|null
     */
    public function getRenewStatus(): ?int
    {
        return $this->dataModel['renewStatus'] ?? null;
    }

    /**
     * Price used upon the next renewal.
     *
     * It is provided as a reference for users
     * when the priceConsentStatus parameter is returned.
     *
     * @return int|null
     */
    public function getRenewPrice()
    {
        return $this->dataModel['renewPrice'] ?? null;
    }

    /**
     * User opinion on the price increase of a product.
     *
     * The options are as follows:
     * 1: The user has agreed with the price increase.
     * 0: The user does not take any action. After the subscription expires, it becomes invalid.
     *
     * @return int|null
     */
    public function getPriceConsentStatus(): ?int
    {
        return $this->dataModel['priceConsentStatus'] ?? null;
    }

    /**
     * Indicates whether to postpone the settlement date.
     * 1: yes
     *
     * @return int|null
     */
    public function getDeferFlag(): ?int
    {
        return $this->dataModel['deferFlag'] ?? null;
    }

    /**
     * Number of days for retaining a subscription relationship
     * after the subscription is canceled.
     *
     * @return int|null
     */
    public function getCancelledSubKeepDays(): ?int
    {
        return $this->dataModel['cancelledSubKeepDays'] ?? null;
    }

    /**
     * Subscription cancellation initiator.
     *
     * The options are as follows:
     * 0: user
     * 1: developer
     * 2: Huawei
     *
     * @return int|null
     */
    public function getCancelWay(): ?int
    {
        return $this->dataModel['cancelWay'] ?? null;
    }

    /**
     * Timestamp when a user cancels a subscription (in UTC), in milliseconds.
     * In the time, you set a subscription renewal to be stopped in the future.
     * The subscription is still valid within the validity period,
     * but the renewal will be stopped in the future. No refund is required.
     *
     * @note cancelWay and cancellationTime are displayed
     *       when a subscription renewal stops (no refund is involved).
     *
     * @return int|null
     */
    public function getCancellationTime(): ?int
    {
        return $this->dataModel['cancellationTime'] ?? null;
    }

    /**
     * Timestamp when a suspended subscription is resumed (in UTC), in milliseconds.
     *
     * @return int|null
     */
    public function getResumeTime(): ?int
    {
        return $this->dataModel['resumeTime'] ?? null;
    }

    /**
     * Cancellation reason.
     *
     * The options are as follows:
     * 0: others
     * 1: too high fee
     * 2: technical problem, for example, product not provided
     * 5: in the blocklist because of fraud
     * 7: subscription switchover
     * 9: service being rarely used and not required
     * 10: other better apps
     *
     * @return int|null
     */
    public function getSurveyReason(): ?int
    {
        return $this->dataModel['surveyReason'] ?? null;
    }

    /**
     * When the value of surveyReason is 0, this parameter is used
     * to collect the cancellation reason entered by users.
     *
     * @return string|null
     */
    public function getSurveyDetails(): ?string
    {
        return $this->dataModel['surveyDetails'] ?? null;
    }

    /**
     * Timestamp when a grace period ends, that is, the number of milliseconds
     * from 00:00:00 on January 1, 1970 to the time.
     *
     * @return int|null
     */
    public function getGraceExpirationTime(): ?int
    {
        return $this->dataModel['graceExpirationTime'] ?? null;
    }
}
